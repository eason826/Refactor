	Command模式通过将请求封装到一个对象（Command）中，并将请求的接受者存放到具体的
ConcreteCommand类中（Receiver）中，从而实现调用操作的对象和操作的具体实现者之间的解
耦。

	Command模式的思想非常简单，但是Command模式也十分常见，并且威力不小。实际上，
Command模式关键就是提供一个抽象的Command类，并将执行操作封装到Command类接口中，
Command类中一般就是只是一些接口的集合，并不包含任何的数据属性（当然在示例代码中，我
们的Command类有一个处理操作的Receiver类的引用，但是其作用也仅仅就是为了实现这个
Command的Excute接口）。这种方式在是纯正的面向对象设计者最为鄙视的设计方式，就像OO设
计新手做系统设计的时候，仅仅将Class作为一个关键字，将C种的全局函数找一个类封装起来
就以为是完成了面向对象的设计。
	但是世界上的事情不是绝对的，上面提到的方式在OO设计种绝大部分的时候可能是一个不
成熟的体现，但是在Command模式中却是起到了很好的效果。主要体现在：
	1） Command模式将调用操作的对象和知道如何实现该操作的对象解耦。在上面Command的
结构图中，Invoker对象根本就不知道具体的是那个对象在处理Excute操作（当然要知道是
Command类别的对象，也仅此而已）。
	2） 在Command要增加新的处理操作对象很容易，我们可以通过创建新的继承自Command的
子类来实现这一点。
	3） Command模式可以和Memento模式结合起来，支持取消的操作。