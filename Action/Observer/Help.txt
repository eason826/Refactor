	Observer模式应该可以说是应用最多、影响最广的模式之一，因为Observer的一个实例
Model/View/Control（MVC）结构在系统开发架构设计中有着很重要的地位和意义，MVC实现了
业务逻辑和表示层的解耦。个人也认为Observer模式是软件开发过程中必须要掌握和使用的模
式之一。在MFC中，Doc/View（文档视图结构）提供了实现MVC的框架结构（有一个从设计模式
（Observer模式）的角度分析分析Doc/View的文章正在进一步的撰写当中，遗憾的是时间：））
。在Java阵容中，Struts则提供和MFC中Doc/View结构类似的实现MVC的框架。另外Java语言本
身就提供了Observer模式的实现接口，这将在讨论中给出。
	当然，MVC只是Observer模式的一个实例。Observer模式要解决的问题为：建立一个一
（Subject）对多（Observer）的依赖关系，并且做到当“一”变化的时候，依赖这个“一”的
多也能够同步改变。最常见的一个例子就是：对同一组数据进行统计分析时候，我们希望能够
提供多种形式的表示（例如以表格进行统计显示、柱状图统计显示、百分比统计显示等）。这
些表示都依赖于同一组数据，我们当然需要当数据改变的时候，所有的统计的显示都能够同时
改变。Observer模式就是解决了这一个问题。

	Observer是影响极为深远的模式之一，也是在大型系统开发过程中要用到的模式之一。除
了MFC、Struts提供了MVC的实现框架，在Java语言中还提供了专门的接口实现Observer模式：
通过专门的类Observable及Observer接口来实现MVC编程模式。
	Observer模式也称为发布－订阅（publish-subscribe），目标就是通知的发布者，观察者
则是通知的订阅者（接受通知）。